name: frost-ai

services:
  app:
    build:
      context: ../../..
      dockerfile: apps/fullstack/Dockerfile
    container_name: frost-app
    ports:
      - "${FROSTAI_PORT:-3000}:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "const http = require('http'); http.get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => { process.exit(1); });",
        ]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3
    profiles:
      - full

  db:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    container_name: frost-db
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    command:
      - postgres
      - -c
      - shared_preload_libraries=pg_cron
      - -c
      - cron.database_name=${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  db-migrate:
    build:
      context: ../../..
      dockerfile: apps/fullstack/Dockerfile
      target: base
    container_name: frst-db-migrate
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    command: ["sh", "-c", "cd apps/fullstack && pnpm exec drizzle-kit push"]
    profiles:
      - migrate

volumes:
  db_data:
