/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AgentsRouteRouteImport } from './routes/agents/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CustomersIndexRouteImport } from './routes/customers/index'
import { Route as AnalyticsIndexRouteImport } from './routes/analytics/index'
import { Route as AgentsIndexRouteImport } from './routes/agents/index'
import { Route as CustomersCustomerIdRouteImport } from './routes/customers/$customerId'
import { Route as AgentsAgentIdRouteImport } from './routes/agents/$agentId'
import { ServerRoute as ApiHealthIndexServerRouteImport } from './routes/api/health/index'
import { ServerRoute as ApiSignalsTrackServerRouteImport } from './routes/api/signals/track'

const rootServerRouteImport = createServerRootRoute()

const AgentsRouteRoute = AgentsRouteRouteImport.update({
  id: '/agents',
  path: '/agents',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomersIndexRoute = CustomersIndexRouteImport.update({
  id: '/customers/',
  path: '/customers/',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalyticsIndexRoute = AnalyticsIndexRouteImport.update({
  id: '/analytics/',
  path: '/analytics/',
  getParentRoute: () => rootRouteImport,
} as any)
const AgentsIndexRoute = AgentsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AgentsRouteRoute,
} as any)
const CustomersCustomerIdRoute = CustomersCustomerIdRouteImport.update({
  id: '/customers/$customerId',
  path: '/customers/$customerId',
  getParentRoute: () => rootRouteImport,
} as any)
const AgentsAgentIdRoute = AgentsAgentIdRouteImport.update({
  id: '/$agentId',
  path: '/$agentId',
  getParentRoute: () => AgentsRouteRoute,
} as any)
const ApiHealthIndexServerRoute = ApiHealthIndexServerRouteImport.update({
  id: '/api/health/',
  path: '/api/health/',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiSignalsTrackServerRoute = ApiSignalsTrackServerRouteImport.update({
  id: '/api/signals/track',
  path: '/api/signals/track',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRouteRouteWithChildren
  '/agents/$agentId': typeof AgentsAgentIdRoute
  '/customers/$customerId': typeof CustomersCustomerIdRoute
  '/agents/': typeof AgentsIndexRoute
  '/analytics': typeof AnalyticsIndexRoute
  '/customers': typeof CustomersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/agents/$agentId': typeof AgentsAgentIdRoute
  '/customers/$customerId': typeof CustomersCustomerIdRoute
  '/agents': typeof AgentsIndexRoute
  '/analytics': typeof AnalyticsIndexRoute
  '/customers': typeof CustomersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/agents': typeof AgentsRouteRouteWithChildren
  '/agents/$agentId': typeof AgentsAgentIdRoute
  '/customers/$customerId': typeof CustomersCustomerIdRoute
  '/agents/': typeof AgentsIndexRoute
  '/analytics/': typeof AnalyticsIndexRoute
  '/customers/': typeof CustomersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/agents'
    | '/agents/$agentId'
    | '/customers/$customerId'
    | '/agents/'
    | '/analytics'
    | '/customers'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/agents/$agentId'
    | '/customers/$customerId'
    | '/agents'
    | '/analytics'
    | '/customers'
  id:
    | '__root__'
    | '/'
    | '/agents'
    | '/agents/$agentId'
    | '/customers/$customerId'
    | '/agents/'
    | '/analytics/'
    | '/customers/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AgentsRouteRoute: typeof AgentsRouteRouteWithChildren
  CustomersCustomerIdRoute: typeof CustomersCustomerIdRoute
  AnalyticsIndexRoute: typeof AnalyticsIndexRoute
  CustomersIndexRoute: typeof CustomersIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/signals/track': typeof ApiSignalsTrackServerRoute
  '/api/health': typeof ApiHealthIndexServerRoute
}
export interface FileServerRoutesByTo {
  '/api/signals/track': typeof ApiSignalsTrackServerRoute
  '/api/health': typeof ApiHealthIndexServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/signals/track': typeof ApiSignalsTrackServerRoute
  '/api/health/': typeof ApiHealthIndexServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/signals/track' | '/api/health'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/signals/track' | '/api/health'
  id: '__root__' | '/api/signals/track' | '/api/health/'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSignalsTrackServerRoute: typeof ApiSignalsTrackServerRoute
  ApiHealthIndexServerRoute: typeof ApiHealthIndexServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/agents': {
      id: '/agents'
      path: '/agents'
      fullPath: '/agents'
      preLoaderRoute: typeof AgentsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customers/': {
      id: '/customers/'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof CustomersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analytics/': {
      id: '/analytics/'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/agents/': {
      id: '/agents/'
      path: '/'
      fullPath: '/agents/'
      preLoaderRoute: typeof AgentsIndexRouteImport
      parentRoute: typeof AgentsRouteRoute
    }
    '/customers/$customerId': {
      id: '/customers/$customerId'
      path: '/customers/$customerId'
      fullPath: '/customers/$customerId'
      preLoaderRoute: typeof CustomersCustomerIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/agents/$agentId': {
      id: '/agents/$agentId'
      path: '/$agentId'
      fullPath: '/agents/$agentId'
      preLoaderRoute: typeof AgentsAgentIdRouteImport
      parentRoute: typeof AgentsRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/health/': {
      id: '/api/health/'
      path: '/api/health'
      fullPath: '/api/health'
      preLoaderRoute: typeof ApiHealthIndexServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/signals/track': {
      id: '/api/signals/track'
      path: '/api/signals/track'
      fullPath: '/api/signals/track'
      preLoaderRoute: typeof ApiSignalsTrackServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AgentsRouteRouteChildren {
  AgentsAgentIdRoute: typeof AgentsAgentIdRoute
  AgentsIndexRoute: typeof AgentsIndexRoute
}

const AgentsRouteRouteChildren: AgentsRouteRouteChildren = {
  AgentsAgentIdRoute: AgentsAgentIdRoute,
  AgentsIndexRoute: AgentsIndexRoute,
}

const AgentsRouteRouteWithChildren = AgentsRouteRoute._addFileChildren(
  AgentsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AgentsRouteRoute: AgentsRouteRouteWithChildren,
  CustomersCustomerIdRoute: CustomersCustomerIdRoute,
  AnalyticsIndexRoute: AnalyticsIndexRoute,
  CustomersIndexRoute: CustomersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSignalsTrackServerRoute: ApiSignalsTrackServerRoute,
  ApiHealthIndexServerRoute: ApiHealthIndexServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
