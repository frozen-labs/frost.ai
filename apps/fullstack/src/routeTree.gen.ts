/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AgentsRouteRouteImport } from './routes/agents/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ModelsIndexRouteImport } from './routes/models/index'
import { Route as CustomersIndexRouteImport } from './routes/customers/index'
import { Route as AnalyticsIndexRouteImport } from './routes/analytics/index'
import { Route as AgentsIndexRouteImport } from './routes/agents/index'
import { Route as ModelsModelIdRouteImport } from './routes/models/$modelId'
import { Route as CustomersCustomerIdRouteImport } from './routes/customers/$customerId'
import { Route as AgentsAgentIdRouteImport } from './routes/agents/$agentId'
import { ServerRoute as ApiHealthIndexServerRouteImport } from './routes/api/health/index'
import { ServerRoute as ApiCustomersIndexServerRouteImport } from './routes/api/customers/index'
import { ServerRoute as ApiSignalsTrackServerRouteImport } from './routes/api/signals/track'
import { ServerRoute as ApiMeteringTokensServerRouteImport } from './routes/api/metering/tokens'
import { ServerRoute as ApiMeteringSignalsServerRouteImport } from './routes/api/metering/signals'

const rootServerRouteImport = createServerRootRoute()

const AgentsRouteRoute = AgentsRouteRouteImport.update({
  id: '/agents',
  path: '/agents',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ModelsIndexRoute = ModelsIndexRouteImport.update({
  id: '/models/',
  path: '/models/',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomersIndexRoute = CustomersIndexRouteImport.update({
  id: '/customers/',
  path: '/customers/',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalyticsIndexRoute = AnalyticsIndexRouteImport.update({
  id: '/analytics/',
  path: '/analytics/',
  getParentRoute: () => rootRouteImport,
} as any)
const AgentsIndexRoute = AgentsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AgentsRouteRoute,
} as any)
const ModelsModelIdRoute = ModelsModelIdRouteImport.update({
  id: '/models/$modelId',
  path: '/models/$modelId',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomersCustomerIdRoute = CustomersCustomerIdRouteImport.update({
  id: '/customers/$customerId',
  path: '/customers/$customerId',
  getParentRoute: () => rootRouteImport,
} as any)
const AgentsAgentIdRoute = AgentsAgentIdRouteImport.update({
  id: '/$agentId',
  path: '/$agentId',
  getParentRoute: () => AgentsRouteRoute,
} as any)
const ApiHealthIndexServerRoute = ApiHealthIndexServerRouteImport.update({
  id: '/api/health/',
  path: '/api/health/',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiCustomersIndexServerRoute = ApiCustomersIndexServerRouteImport.update({
  id: '/api/customers/',
  path: '/api/customers/',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiSignalsTrackServerRoute = ApiSignalsTrackServerRouteImport.update({
  id: '/api/signals/track',
  path: '/api/signals/track',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiMeteringTokensServerRoute = ApiMeteringTokensServerRouteImport.update({
  id: '/api/metering/tokens',
  path: '/api/metering/tokens',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiMeteringSignalsServerRoute =
  ApiMeteringSignalsServerRouteImport.update({
    id: '/api/metering/signals',
    path: '/api/metering/signals',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRouteRouteWithChildren
  '/agents/$agentId': typeof AgentsAgentIdRoute
  '/customers/$customerId': typeof CustomersCustomerIdRoute
  '/models/$modelId': typeof ModelsModelIdRoute
  '/agents/': typeof AgentsIndexRoute
  '/analytics': typeof AnalyticsIndexRoute
  '/customers': typeof CustomersIndexRoute
  '/models': typeof ModelsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/agents/$agentId': typeof AgentsAgentIdRoute
  '/customers/$customerId': typeof CustomersCustomerIdRoute
  '/models/$modelId': typeof ModelsModelIdRoute
  '/agents': typeof AgentsIndexRoute
  '/analytics': typeof AnalyticsIndexRoute
  '/customers': typeof CustomersIndexRoute
  '/models': typeof ModelsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/agents': typeof AgentsRouteRouteWithChildren
  '/agents/$agentId': typeof AgentsAgentIdRoute
  '/customers/$customerId': typeof CustomersCustomerIdRoute
  '/models/$modelId': typeof ModelsModelIdRoute
  '/agents/': typeof AgentsIndexRoute
  '/analytics/': typeof AnalyticsIndexRoute
  '/customers/': typeof CustomersIndexRoute
  '/models/': typeof ModelsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/agents'
    | '/agents/$agentId'
    | '/customers/$customerId'
    | '/models/$modelId'
    | '/agents/'
    | '/analytics'
    | '/customers'
    | '/models'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/agents/$agentId'
    | '/customers/$customerId'
    | '/models/$modelId'
    | '/agents'
    | '/analytics'
    | '/customers'
    | '/models'
  id:
    | '__root__'
    | '/'
    | '/agents'
    | '/agents/$agentId'
    | '/customers/$customerId'
    | '/models/$modelId'
    | '/agents/'
    | '/analytics/'
    | '/customers/'
    | '/models/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AgentsRouteRoute: typeof AgentsRouteRouteWithChildren
  CustomersCustomerIdRoute: typeof CustomersCustomerIdRoute
  ModelsModelIdRoute: typeof ModelsModelIdRoute
  AnalyticsIndexRoute: typeof AnalyticsIndexRoute
  CustomersIndexRoute: typeof CustomersIndexRoute
  ModelsIndexRoute: typeof ModelsIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/metering/signals': typeof ApiMeteringSignalsServerRoute
  '/api/metering/tokens': typeof ApiMeteringTokensServerRoute
  '/api/signals/track': typeof ApiSignalsTrackServerRoute
  '/api/customers': typeof ApiCustomersIndexServerRoute
  '/api/health': typeof ApiHealthIndexServerRoute
}
export interface FileServerRoutesByTo {
  '/api/metering/signals': typeof ApiMeteringSignalsServerRoute
  '/api/metering/tokens': typeof ApiMeteringTokensServerRoute
  '/api/signals/track': typeof ApiSignalsTrackServerRoute
  '/api/customers': typeof ApiCustomersIndexServerRoute
  '/api/health': typeof ApiHealthIndexServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/metering/signals': typeof ApiMeteringSignalsServerRoute
  '/api/metering/tokens': typeof ApiMeteringTokensServerRoute
  '/api/signals/track': typeof ApiSignalsTrackServerRoute
  '/api/customers/': typeof ApiCustomersIndexServerRoute
  '/api/health/': typeof ApiHealthIndexServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/metering/signals'
    | '/api/metering/tokens'
    | '/api/signals/track'
    | '/api/customers'
    | '/api/health'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/metering/signals'
    | '/api/metering/tokens'
    | '/api/signals/track'
    | '/api/customers'
    | '/api/health'
  id:
    | '__root__'
    | '/api/metering/signals'
    | '/api/metering/tokens'
    | '/api/signals/track'
    | '/api/customers/'
    | '/api/health/'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiMeteringSignalsServerRoute: typeof ApiMeteringSignalsServerRoute
  ApiMeteringTokensServerRoute: typeof ApiMeteringTokensServerRoute
  ApiSignalsTrackServerRoute: typeof ApiSignalsTrackServerRoute
  ApiCustomersIndexServerRoute: typeof ApiCustomersIndexServerRoute
  ApiHealthIndexServerRoute: typeof ApiHealthIndexServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/agents': {
      id: '/agents'
      path: '/agents'
      fullPath: '/agents'
      preLoaderRoute: typeof AgentsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/models/': {
      id: '/models/'
      path: '/models'
      fullPath: '/models'
      preLoaderRoute: typeof ModelsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customers/': {
      id: '/customers/'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof CustomersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analytics/': {
      id: '/analytics/'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/agents/': {
      id: '/agents/'
      path: '/'
      fullPath: '/agents/'
      preLoaderRoute: typeof AgentsIndexRouteImport
      parentRoute: typeof AgentsRouteRoute
    }
    '/models/$modelId': {
      id: '/models/$modelId'
      path: '/models/$modelId'
      fullPath: '/models/$modelId'
      preLoaderRoute: typeof ModelsModelIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customers/$customerId': {
      id: '/customers/$customerId'
      path: '/customers/$customerId'
      fullPath: '/customers/$customerId'
      preLoaderRoute: typeof CustomersCustomerIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/agents/$agentId': {
      id: '/agents/$agentId'
      path: '/$agentId'
      fullPath: '/agents/$agentId'
      preLoaderRoute: typeof AgentsAgentIdRouteImport
      parentRoute: typeof AgentsRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/health/': {
      id: '/api/health/'
      path: '/api/health'
      fullPath: '/api/health'
      preLoaderRoute: typeof ApiHealthIndexServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/customers/': {
      id: '/api/customers/'
      path: '/api/customers'
      fullPath: '/api/customers'
      preLoaderRoute: typeof ApiCustomersIndexServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/signals/track': {
      id: '/api/signals/track'
      path: '/api/signals/track'
      fullPath: '/api/signals/track'
      preLoaderRoute: typeof ApiSignalsTrackServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/metering/tokens': {
      id: '/api/metering/tokens'
      path: '/api/metering/tokens'
      fullPath: '/api/metering/tokens'
      preLoaderRoute: typeof ApiMeteringTokensServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/metering/signals': {
      id: '/api/metering/signals'
      path: '/api/metering/signals'
      fullPath: '/api/metering/signals'
      preLoaderRoute: typeof ApiMeteringSignalsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AgentsRouteRouteChildren {
  AgentsAgentIdRoute: typeof AgentsAgentIdRoute
  AgentsIndexRoute: typeof AgentsIndexRoute
}

const AgentsRouteRouteChildren: AgentsRouteRouteChildren = {
  AgentsAgentIdRoute: AgentsAgentIdRoute,
  AgentsIndexRoute: AgentsIndexRoute,
}

const AgentsRouteRouteWithChildren = AgentsRouteRoute._addFileChildren(
  AgentsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AgentsRouteRoute: AgentsRouteRouteWithChildren,
  CustomersCustomerIdRoute: CustomersCustomerIdRoute,
  ModelsModelIdRoute: ModelsModelIdRoute,
  AnalyticsIndexRoute: AnalyticsIndexRoute,
  CustomersIndexRoute: CustomersIndexRoute,
  ModelsIndexRoute: ModelsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiMeteringSignalsServerRoute: ApiMeteringSignalsServerRoute,
  ApiMeteringTokensServerRoute: ApiMeteringTokensServerRoute,
  ApiSignalsTrackServerRoute: ApiSignalsTrackServerRoute,
  ApiCustomersIndexServerRoute: ApiCustomersIndexServerRoute,
  ApiHealthIndexServerRoute: ApiHealthIndexServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
